plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.178'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {
    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            systemProperty 'forge.logging.console.level', 'debug'

            modSource project.sourceSets.main
        }

        client {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
            argument '--nogui'
        }

        gameTestServer {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            forge_version    : neo_version,
            mod_id           : mod_id,
            mod_name         : mod_name,
            mod_version      : mod_version,
            mod_authors      : "Amiri163"
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : "Amiri163",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : "Amiri163",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}